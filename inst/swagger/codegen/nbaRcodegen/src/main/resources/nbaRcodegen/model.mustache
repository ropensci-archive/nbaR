{{#models}}
{{#model}}
{{>partial_header}}

#' {{classname}} Class
#'
{{#vars}}
#' @field {{baseName}} {{title}}
{{/vars}}
#'
#' @importFrom R6 R6Class
#' @importFrom jsonlite fromJSON toJSON
#' @export
{{classname}} <- R6::R6Class(
  '{{classname}}',
  public = list(
    {{#vars}}
    `{{{baseName}}}` = NULL,
    {{/vars}}
    initialize = function({{#vars}}`{{baseName}}`{{#hasMore}}, {{/hasMore}}{{/vars}}){
      {{#vars}}
      if (!missing(`{{baseName}}`)) {
        {{^isListContainer}}
        {{#isInteger}}
        stopifnot(is.numeric(`{{baseName}}`), length(`{{baseName}}`) == 1)
        {{/isInteger}}
        {{#isLong}}
        stopifnot(is.numeric(`{{baseName}}`), length(`{{baseName}}`) == 1)
        {{/isLong}}
        {{#isFloat}}
        stopifnot(is.numeric(`{{baseName}}`), length(`{{baseName}}`) == 1)
        {{/isFloat}}
        {{#isDouble}}
        stopifnot(is.numeric(`{{baseName}}`), length(`{{baseName}}`) == 1)
        {{/isDouble}}
        {{#isString}}
        stopifnot(is.character(`{{baseName}}`), length(`{{baseName}}`) == 1)
        {{/isString}}
        {{#isDate}}
        stopifnot(is.character(`{{baseName}}`), length(`{{baseName}}`) == 1)
        {{/isDate}}
        {{#isDateTime}}
        stopifnot(is.character(`{{baseName}}`), length(`{{baseName}}`) == 1)
        {{/isDateTime}}
        {{^isPrimitiveType}}
        stopifnot(R6::is.R6(`{{baseName}}`))
        {{/isPrimitiveType}}
        {{/isListContainer}}
        {{#isListContainer}}
        {{#isPrimitiveType}}
        stopifnot(is.list(`{{baseName}}`), length(`{{baseName}}`) != 0)
        lapply(`{{baseName}}`, function(x) stopifnot(is.character(x)))
        {{/isPrimitiveType}}
        {{^isPrimitiveType}}
        stopifnot(is.list(`{{baseName}}`), length(`{{baseName}}`) != 0)
        lapply(`{{baseName}}`, function(x) stopifnot(R6::is.R6(x)))
        {{/isPrimitiveType}}
        {{/isListContainer}}
        self[['{{baseName}}']] <- `{{baseName}}`
      }
      {{/vars}}
    },

    toList = function() {
      {{classname}}List <- list()
      {{#vars}}
        if (!is.null(self[['{{baseName}}']])) {
        {{classname}}List[['{{baseName}}']] <- {{#isListContainer}}{{#isPrimitiveType}}self[['{{baseName}}']]{{/isPrimitiveType}}{{^isPrimitiveType}}lapply(self[['{{baseName}}']], function(x) x$toList()){{/isPrimitiveType}}{{/isListContainer}}{{^isListContainer}}self[['{{baseName}}']]{{^isPrimitiveType}}$toList(){{/isPrimitiveType}}{{/isListContainer}}
      }
      {{/vars}}
      ## omit empty nested lists in returned list
      {{classname}}List[sapply({{classname}}List, length) > 0]
      },

    fromList = function({{classname}}List, typeMapping=NULL) {
    {{#vars}}      
      if (!is.null({{classname}}List[['{{baseName}}']])) {      
      {{#isListContainer}}
        {{#isPrimitiveType}}
          self[['{{baseName}}']] <- {{classname}}List[['{{baseName}}']]
        {{/isPrimitiveType}}
        {{^isPrimitiveType}}          
          self[['{{baseName}}']] <- lapply({{classname}}List[['{{baseName}}']], function(x) {
             {{datatype}}$new()$fromList(x, typeMapping=typeMapping)            
          })
        {{/isPrimitiveType}}
      {{/isListContainer}}
      {{^isListContainer}}
        {{#isPrimitiveType}}
          self[['{{baseName}}']] <- {{classname}}List[['{{baseName}}']]
        {{/isPrimitiveType}}
        {{^isPrimitiveType}}
          if (is.null(typeMapping[['{{baseName}}']])) {
             self[['{{baseName}}']] <- {{datatype}}$new()$fromList({{classname}}List[['{{baseName}}']])
          } else {
              ## make object of type specified by type mapping
              obj <- eval(parse(text=paste0(typeMapping[['{{baseName}}']], "$new()")))
              self[['{{baseName}}']] <- obj$fromList({{classname}}List[['{{baseName}}']])
          }
        {{/isPrimitiveType}}        
      {{/isListContainer}}
      }
    {{/vars}}        
      return(self)
    },

    toJSONString = function(pretty=T) {
      jsonlite::toJSON(self$toList(), simplifyVector=T, auto_unbox=T, pretty=pretty)
    },

    fromJSONString = function({{classname}}Json, typeMapping=NULL) {
      {{classname}}List <- jsonlite::fromJSON({{classname}}Json, simplifyVector=F)
      {{#vars}}
      {{#isPrimitiveType}}
      self[['{{baseName}}']] <- {{classname}}List[['{{baseName}}']]
      {{/isPrimitiveType}}
      {{^isPrimitiveType}}
      {{#isListContainer}}
      self[['{{baseName}}']] <- lapply({{classname}}List[['{{baseName}}']],
                                        function(x) {{datatype}}$new()$fromJSONString(jsonlite::toJSON(x, auto_unbox = TRUE), typeMapping=typeMapping))
      {{/isListContainer}}
      {{^isListContainer}}
      if (is.null(typeMapping[['{{baseName}}']])) {
          self[['{{baseName}}']] <- {{datatype}}$new()$fromJSONString(jsonlite::toJSON({{classname}}List[['{{baseName}}']], auto_unbox = TRUE), typeMapping=typeMapping) 
      } else {
          obj <- eval(parse(text=paste0(typeMapping[['{{baseName}}']], "$new()")))
          self[['{{baseName}}']] <- obj$fromJSONString(jsonlite::toJSON({{classname}}List[['{{baseName}}']], auto_unbox = TRUE), typeMapping=typeMapping)
      }
      {{/isListContainer}}
      {{/isPrimitiveType}}
      {{/vars}}
      invisible(self)
    }
  )
)
{{/model}}
{{/models}}
