{{>partial_header}}
{{#operations}}
#' @title {{baseName}} operations
#' @description {{importPath}}
#'
#' @field path Stores url path of the request.
#' @field userAgent Set the user agent of the request.
#'
#' @importFrom R6 R6Class
#'
#' @section Methods:
#' \describe{
{{#operation}}
  {{#bodyAllowed}}
  {{/bodyAllowed}}
  {{^bodyAllowed}}
#'
#' {{operationId}} {{summary}}
#'
  {{/bodyAllowed}}
{{/operation}}
#' }
#'
#' @export
{{classname}} <- R6::R6Class(
    '{{classname}}',
    inherit=ApiClient,
    public = list(
        userAgent = "{{#httpUserAgent}}{{{.}}}{{/httpUserAgent}}{{^httpUserAgent}}Swagger-Codegen/{{{packageVersion}}}/r{{/httpUserAgent}}",
        initialize = function(basePath){
        super$initialize(basePath)
    },

    {{#operation}} 
    {{#bodyAllowed}}
    {{/bodyAllowed}}
    {{^bodyAllowed}}
    # '@name {{operationId}}
    # '@title {{summary}}
    # '@description {{notes}}
    # '@return \code{ {{returnType}} }
    {{#hasQueryParams}}
    {{#queryParams}}
    # '@param {{paramName}}: {{dataType}}; {{description}}
    {{/queryParams}}
    {{/hasQueryParams}}        
    # '@param ...; additional parameters passed to httr::GET or httr::POST
    {{operationId}} = function({{#allParams}}{{baseName}}=NULL, {{/allParams}}{{#hasQueryParams}}queryParams=list(), {{/hasQueryParams}}{{#isResponseFile}}filename=format(Sys.time(), "download-%Y-%m-%dT%H:%m.zip"), {{/isResponseFile}}...){
        headerParams <- character()
      {{#hasHeaderParams}}
        {{#headerParams}}

         if (!missing(`{{paramName}}`)) {
            headerParams['{{baseName}}'] <- `{{paramName}}`

         }
          {{/headerParams}}
        {{/hasHeaderParams}}
      {{#hasQueryParams}}
        if (!is.null(querySpec) & length(queryParams) > 0) {
            stop("QuerySpec object cannot be combined with parameters passed via queryParams argument.")
        }
          {{#queryParams}}            
            
        if (!missing(`{{baseName}}`)) {
          ## querySpec can be either JSON string or object of type QuerySpec. 
          param <- ifelse(typeof(`{{baseName}}`) == "environment", `{{baseName}}`$toJSONString(), `{{baseName}}`)    
          queryParams['{{baseName}}'] <- param
        }
        ## querySpec parameter has underscore in NBA, omitted in function argument for convenience
        names(queryParams) <- gsub(
          paste0("\\.", "querySpec"), # tweak to not transform .querySpec 
          "_querySpec", 
          names(queryParams)
        )

          {{/queryParams}}
      {{/hasQueryParams}}
      {{^hasQueryParams}}
        queryParams <- list()
      {{/hasQueryParams}}
        {{#hasFormParams}}
        body <- list(
          {{#formParams}}
            {{^isFile}}
            "{{baseName}}" = {{paramName}}{{#hasMore}},{{/hasMore}}
              {{/isFile}}
              {{#isFile}}
            "{{baseName}}" = httr::upload_file({{paramName}}){{#hasMore}},{{/hasMore}}
              {{/isFile}}
          {{/formParams}}
          )

        {{/hasFormParams}}
        {{#hasBodyParam}}
          {{#bodyParams}}
        if (!missing(`{{baseName}}`)) {
            body <- `{{baseName}}`$toJSONString()
        } else {
            body <- NULL
        }

          {{/bodyParams}}
        {{/hasBodyParam}}
        urlPath <- "{{path}}"
        {{#hasPathParams}}
          {{#pathParams}}
        if (!missing(`{{baseName}}`)) {
            urlPath <- gsub(paste0("\\{", "{{baseName}}", "\\}"), `{{baseName}}`, urlPath)
        }

          {{/pathParams}}
        {{/hasPathParams}}
        response <- self$callApi(url = paste0(self$basePath, urlPath),
                                 method = "{{httpMethod}}",
                                 queryParams = queryParams,
                                 headerParams = headerParams,
                                 body = body,
                                 {{#isResponseFile}}
                                 httr::write_disk(filename),
                                 httr::progress(),  
                                 {{/isResponseFile}}
                                 ...)

        if (httr::status_code(response) %/% 100 != 2) {
            self$handleError(response)
        } else {
        {{#returnType}}
          {{#returnTypeIsPrimitive}}
            ## API call result is 'primitive type', return vector or single value
            result <- as.{{returnType}}(unlist(httr::content(response)))
          {{/returnTypeIsPrimitive}}
          {{^returnTypeIsPrimitive}}
            {{#isMapContainer}}
            ## API call result is a 'map container' and will be parsed to list 
            result <- httr::content(response, simplifyVector=T)
            {{/isMapContainer}}            
            {{^isMapContainer}}
            ## API call result is object is model class
            returnObject <- {{returnType}}$new()
            {{#isListContainer}}
            ## API call result is 'list container'
            result <- lapply(httr::content(response), function(x)returnObject$fromList(x, typeMapping=list(item=private$getBaseDataType())))
            {{/isListContainer}}
            {{^isListContainer}}
            ## API call result is QueryResult, list items must be mapped to model class
            result <- returnObject$fromList(httr::content(response), typeMapping=list(item=private$getBaseDataType()))
            {{/isListContainer}}            
            {{/isMapContainer}}
          {{/returnTypeIsPrimitive}}
            Response$new(result, response)
          {{/returnType}}
          {{^returnType}}        
            ## return reponse object with empty content
            Response$new(NULL, response)
          {{/returnType}}           
        }        
    }{{#hasMore}},{{/hasMore}}
    {{/bodyAllowed}}
    {{/operation}}
  )
)
{{/operations}}

