{{#models}}{{#model}}context("Testing class {{classname}}")

# Make a list with random arguments for all fields in the class
args <- list()
{{#vars}}
  {{^isListContainer}}
    {{#isBoolean}}
      args[["{{baseName}}"]] <- sample(c(TRUE, FALSE), 1)
    {{/isBoolean}}
    {{#isInteger}}
      args[["{{baseName}}"]] <- sample(0:10, 1)
    {{/isInteger}}
    {{#isLong}}
      args[["{{baseName}}"]] = runif(1)
    {{/isLong}}
    {{#isFloat}}
      args[["{{baseName}}"]] <- runif(1)
    {{/isFloat}}
    {{#isDouble}}
      args[["{{baseName}}"]] <- runif(1)
    {{/isDouble}}
    {{#isString}}
      args[["{{baseName}}"]] <- paste(sample(c(LETTERS, letters),
      sample(1:20, 1)), collapse="")
    {{/isString}}
    {{#isDate}}
      randomDate <- as.character(sample(seq(as.Date('1600/01/01'),
      as.Date('2018/06/04'), by="day"), 1))
      args[["{{baseName}}"]] <- randomDate
    {{/isDate}}
    {{#isDateTime}}
      randomDate <- as.character(sample(seq(as.Date('1600/01/01'),
      as.Date('2018/06/04'), by="day"), 1))
      args[["{{baseName}}"]] <- randomDate
    {{/isDateTime}}
    {{^isPrimitiveType}}
      args[["{{baseName}}"]] <- {{datatype}}$new()
      {{/isPrimitiveType}}
  {{/isListContainer}}
  {{#isListContainer}}
    {{#isPrimitiveType}}
      random_string_list() <- lapply(1:sample(5:10, 1),
      function(x)paste(sample(letters, sample(1:10, 1)), collapse=''))
      args[["{{baseName}}"]] <- random_string_list()
    {{/isPrimitiveType}}
    {{^isPrimitiveType}}
      random_string_list() <- lapply(1:sample(1:10, 1),
                           function(x){{datatype}}$new())
      args[["{{baseName}}"]] <- random_string_list()
    {{/isPrimitiveType}}
  {{/isListContainer}}
  {{#isMapContainer}}
      random_string_list() <- as.list(mapply(function(x,y){
                                     a=list();a[[x]]=y
                                   },
                            c('A', 'B'), c('a', 'b')))
      args[["{{baseName}}"]] <- random_string_list()                            
  {{/isMapContainer}}
{{/vars}}

# make {{classname}} object without and with args
objEmpty <- {{classname}}$new()
objRand <- do.call({{classname}}$new, args)

test_that("Constructor works", {
  expect_s3_class(objEmpty, "{{classname}}")  
  expect_s3_class(objRand, "{{classname}}")  
})

test_that("toList works", {
  expect_type(objEmpty$toList(), "list")
  expect_type(objRand$toList(), "list")
})

test_that("fromList works", {
  obj <- {{classname}}$new()
  obj$fromList(objRand$toList())
  # expect_equal(obj, objRand)
  expect_s3_class(obj, "{{classname}}")
})

test_that("toJSONString works", {
  expect_s3_class(objEmpty$toJSONString(), "json")
  expect_true(objEmpty$toJSONString() != "")
  expect_s3_class(objRand$toJSONString(), "json")
  expect_true(objRand$toJSONString() != "")
})

test_that("fromJSONString works", {
  obj <- {{classname}}$new()
  obj$fromJSONString(objRand$toJSONString())
  # expect_equal(obj, objRand)
  expect_s3_class(obj, "{{classname}}")
})

test_that("print works", {
  obj <- {{classname}}$new()
  obj$fromJSONString(objRand$toJSONString())
  ## check that the print method doesn't error
  expect_snapshot(obj$print())
})

{{/model}}{{/models}}
