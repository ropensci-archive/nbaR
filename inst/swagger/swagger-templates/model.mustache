{{#models}}
{{#model}}
{{>partial_header}}
#' 
#' @docType class
#'
#' @format R6 class
#'
#' @usage
#' # {{classname}}$new()
#'
#' @format
#' R6 class
#' 
#' @title {{classname}} Class
#'
#' @description 
#' For more information on the NBA object model, please refer to the
#' official NBA documentation at
#' \href{https://docs.biodiversitydata.nl}{https://docs.biodiversitydata.nl} and
#' the NBA model and endpoints reference at
#' \href{https://docs.biodiversitydata.nl/endpoints-reference}{https://docs.biodiversitydata.nl/endpoints-reference}.
#'
#' @details Model class for {{classname}} objects. {{description}}
#'
#'
{{#vars}}
#' @field {{baseName}} {{title}} {{#isListContainer}}list({{/isListContainer}}{{datatype}}{{#isListContainer}}){{/isListContainer}}
#'        {{description}}   
{{/vars}}
#'
#'
#' @section Methods:
#' \describe{
#' 
#' \item{\code{$new()}}{
#'
#'   Constructor {{classname}} object.
#'
#' }
#' \item{\code{$fromList({{classname}}List)}}{
#'
#'   Create {{classname}} object from list.
#'
#' }
#'
#' \item{\code{$toList()}}{
#'
#'   Get list representation of {{classname}}.
#' 
#' }
#' \item{\code{fromJSONString({{classname}}Json)}}{
#'
#'   Create {{classname}} object from JSON.
#' 
#' }
#' \item{\code{toJSONString(pretty=TRUE)}}{
#' 
#'   Get JSON representation of {{classname}}.
#'
#' }
#' }
#' @importFrom R6 R6Class
#' @importFrom jsonlite fromJSON toJSON
#' @export
{{classname}} <- R6::R6Class(
  '{{classname}}',
  public = list(
    {{#vars}}
    `{{{baseName}}}` = NULL,
    {{/vars}}
    initialize = function(
    {{#vars}}
    `{{baseName}}`{{#hasMore}},{{/hasMore}}
    {{/vars}}){
    {{#vars}}
      if (!missing(`{{baseName}}`)) {
        {{^isListContainer}}
        {{#isInteger}}
        stopifnot(is.numeric(`{{baseName}}`),
                  length(`{{baseName}}`) == 1)
        {{/isInteger}}
        {{#isLong}}
        stopifnot(is.numeric(`{{baseName}}`),
                  length(`{{baseName}}`) == 1)
        {{/isLong}}
        {{#isFloat}}
        stopifnot(is.numeric(`{{baseName}}`),
                  length(`{{baseName}}`) == 1)
        {{/isFloat}}
        {{#isDouble}}
        stopifnot(is.numeric(`{{baseName}}`),
                  length(`{{baseName}}`) == 1)
        {{/isDouble}}
        {{#isString}}
        stopifnot(is.character(`{{baseName}}`),
                  length(`{{baseName}}`) == 1)
        {{/isString}}
        {{#isDate}}
        stopifnot(is.character(`{{baseName}}`),
                  length(`{{baseName}}`) == 1)
        {{/isDate}}
        {{#isDateTime}}
        stopifnot(is.character(`{{baseName}}`),
                  length(`{{baseName}}`) == 1)
        {{/isDateTime}}
        {{^isPrimitiveType}}
        stopifnot(R6::is.R6(`{{baseName}}`))
        {{/isPrimitiveType}}
        self[["{{baseName}}"]] <- `{{baseName}}`
        {{/isListContainer}}
        {{#isListContainer}}
        {{#isPrimitiveType}}
        stopifnot(is.list(`{{baseName}}`),
                  length(`{{baseName}}`) != 0)
        lapply(`{{baseName}}`,
               function(x) stopifnot(is.character(x)))
        {{/isPrimitiveType}}
        {{^isPrimitiveType}}
        stopifnot(is.list(`{{baseName}}`),
                  length(`{{baseName}}`) != 0)
        lapply(`{{baseName}}`,
               function(x) stopifnot(R6::is.R6(x)))
        {{/isPrimitiveType}}
        ## omit names as they should not be part of JSON representation
        self[["{{baseName}}"]] <- unname(`{{baseName}}`)
        {{/isListContainer}}
      }
    {{/vars}}
    },
    toList = function() {
      {{classname}}List <- list()
      {{#vars}}
        if (!is.null(self[["{{baseName}}"]])) {
            {{classname}}List[["{{baseName}}"]] <-
                  {{#isListContainer}}{{#isPrimitiveType}}self[["{{baseName}}"]]{{/isPrimitiveType}}{{^isPrimitiveType}}lapply(self[["{{baseName}}"]], function(x) x$toList()){{/isPrimitiveType}}{{/isListContainer}}{{^isListContainer}}self[["{{baseName}}"]]{{^isPrimitiveType}}$toList(){{/isPrimitiveType}}{{/isListContainer}}
      }
      {{/vars}}
      ## omit empty nested lists in returned list
      {{classname}}List[vapply(
                            {{classname}}List,
                            length,
                            FUN.VALUE=integer(1)) > 0]
      },
    fromList = function({{classname}}List,
                        typeMapping = NULL) {
      {{#vars}}
      {{#isPrimitiveType}}
      {{#needsTypeMapping}}
      if (is.null(typeMapping[["{{baseName}}"]])) {
            self[["{{baseName}}"]] <-
                {{classname}}List[["{{baseName}}"]]
      } else {
          obj <- eval(parse(
              text = paste0(typeMapping[["{{baseName}}"]], "$new()")))
          self[["{{baseName}}"]] <- obj$fromList(
              {{classname}}List[["{{baseName}}"]],
              typeMapping = typeMapping)
              }
      {{/needsTypeMapping}}
      {{^needsTypeMapping}}
            self[["{{baseName}}"]] <-
                {{classname}}List[["{{baseName}}"]]        
      {{/needsTypeMapping}}
      {{/isPrimitiveType}}
      {{^isPrimitiveType}}
      {{#isListContainer}}
      self[["{{baseName}}"]] <- lapply({{classname}}List[["{{baseName}}"]],
                                       function(x){
                                          {{datatype}}$new()$fromList(x,
                                          typeMapping = typeMapping)
                                          })
      {{/isListContainer}}
      {{^isListContainer}}
      {{#needsTypeMapping}}
      if (is.null(typeMapping[["{{baseName}}"]])) {
          self[["{{baseName}}"]] <- {{datatype}}$new()$fromList(
              {{classname}}List[["{{baseName}}"]],
              typeMapping = typeMapping) 
      } else {
          obj <- eval(parse(
              text = paste0(typeMapping[["{{baseName}}"]], "$new()")))
          self[["{{baseName}}"]] <- obj$fromList(
              {{classname}}List[["{{baseName}}"]],
              typeMapping = typeMapping)
      }
      {{/needsTypeMapping}}
      {{^needsTypeMapping}}
          self[["{{baseName}}"]] <- {{datatype}}$new()$fromList(
              {{classname}}List[["{{baseName}}"]],
              typeMapping = typeMapping)
      {{/needsTypeMapping}}          
      {{/isListContainer}}
      {{/isPrimitiveType}}
      {{/vars}}
      invisible(self)
    },
    toJSONString = function(pretty = TRUE) {
      jsonlite::toJSON(
          self$toList(),
          simplifyVector = TRUE,
          auto_unbox = TRUE,
          pretty = pretty)
    },
    fromJSONString = function({{classname}}Json,
                              typeMapping = NULL) {
      {{classname}}List <- jsonlite::fromJSON(
          {{classname}}Json,
          simplifyVector = FALSE)
      self <- self$fromList({{classname}}List)
      invisible(self)
    },
    print = function(...) {
       ## print class name
       cat("<{{classname}}>\n")    
       ## print all members with values
       cat("Fields:\n")
         {{#vars}}           
           if (typeof(self${{{baseName}}}) == "environment") {
               cat("\t{{{baseName}}}:\tobject of class", paste0("<", class(self${{{baseName}}})[1], ">"), "\n")
           }
           else if (typeof(self${{{baseName}}}) == "list") {
               cat("\t{{{baseName}}}:\tlist of length", length(self${{{baseName}}}), "\n")
           }
           else {
               cat("\t{{{baseName}}}:\t", self${{{baseName}}}, "\n")
           }           
         {{/vars}}
       ## print all methods
       cat("Methods:\n")
       cat("\tfromJSONString\n")
       cat("\ttoJSONString\n")
       cat("\tfromList\n")
       cat("\ttoList\n")
       cat("\tprint\n")
       invisible(self)
    }  
  )
)
{{/model}}
{{/models}}
