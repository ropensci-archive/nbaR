{{>partial_header}}
# {{baseName}} client wrapper
# for {{importPath}} objects

{{#operations}}
  {{#operation}}
    #' @name {{classVarName}}_{{operationId}}
    #' @title {{summary}}
    #' @description This is a wrapper for the method \code{ {{operationId}} }
    #' from class \code{ {{baseName}}Client}.
    {{#notes}}#' @details {{notes}}{{/notes}}
    #' @family {{importPath}}Client-wrappers
    {{#returnType}}#' @return {{#returnType}}{{#returnTypeIsPrimitive}}scalar{{/returnTypeIsPrimitive}}{{^returnTypeIsPrimitive}}list or data.frame, as specified by \code{returnType}{{/returnTypeIsPrimitive}}{{/returnType}}{{/returnType}}
      {{#allParams}}
        {{#isPrimitiveType}}
    #' @param {{baseName}} {{description}}, type: {{baseType}}
        {{/isPrimitiveType}}
        {{^isPrimitiveType}}
          {{#isListContainer}}
    #' @param {{baseName}} {{description}}, type: {{baseType}}
          {{/isListContainer}}
        {{/isPrimitiveType}}
      {{/allParams}}
      {{#hasQueryParams}}
    #' @param queryParams Named list or vector with names being the fields to be queried and values being the values to match
      {{/hasQueryParams}}
      {{#isResponseFile}}
    #' @param filename Filename to save results to, defaults to `format(Sys.time(),"download-\%Y-\%m-\%dT\%H:\%m.zip")`
      {{/isResponseFile}}
    {{#returnType}}
      {{#returnTypeIsPrimitive}}
        {{^returnSimpleType}}
    #' @param returnType Either \code{list} or \code{data.frame} (default)
        {{/returnSimpleType}}
      {{/returnTypeIsPrimitive}}
      {{^returnTypeIsPrimitive}}
    #' @param returnType Either \code{list} or \code{data.frame} (default)
      {{/returnTypeIsPrimitive}}        
    {{/returnType}}
    #' @param ... additional parameters passed to {{operationId}} from class {{importPath}}Client
    #' @export
    {{classVarName}}_{{operationId}} <- function(
    {{#allParams}}
      {{#isPrimitiveType}}
        {{baseName}} = NULL,
      {{/isPrimitiveType}}
      {{^isPrimitiveType}}
        {{#isListContainer}}
          {{baseName}} = NULL,
        {{/isListContainer}}
      {{/isPrimitiveType}}
    {{/allParams}}
    {{#hasQueryParams}}
      queryParams = list(),
    {{/hasQueryParams}}
    {{#isResponseFile}}
      filename = format(Sys.time(),
      "download-%Y-%m-%dT%H:%m.zip"),
    {{/isResponseFile}}
    {{#returnType}}
      {{#returnTypeIsPrimitive}}
        {{^returnSimpleType}}
        returnType='data.frame',
        {{/returnSimpleType}}
      {{/returnTypeIsPrimitive}}
      {{^returnTypeIsPrimitive}}
        returnType='data.frame',
    {{/returnTypeIsPrimitive}}
    {{/returnType}}
    ...) {
    
    {{#returnType}}
      {{^returnTypeIsPrimitive}}
    ## check returnType argument
    if (! returnType %in% c("list", "data.frame")) {
      stop("Invalid returnType argument. Must be 'data.frame' or 'list'")
    }
      {{/returnTypeIsPrimitive}}
    {{/returnType}}
    
    sc <- {{baseName}}Client$new()
    res <- sc${{operationId}}(
    {{#allParams}}
      {{#isPrimitiveType}}
        {{baseName}},
      {{/isPrimitiveType}}
      {{^isPrimitiveType}}
        {{#isListContainer}}
          {{baseName}},
        {{/isListContainer}}
      {{/isPrimitiveType}}
    {{/allParams}}
    {{#hasQueryParams}} queryParams=queryParams, {{/hasQueryParams}}
      {{#isResponseFile}}
        filename=filename,
      {{/isResponseFile}}  
      ...)      
      {{#returnType}}
        {{#returnTypeIsPrimitive}}
          result <- res$content
        {{/returnTypeIsPrimitive}}          
        {{^returnTypeIsPrimitive}}
          ## return simpler data structure for object response
          result <- .un_object(res, returnType=returnType)
        {{/returnTypeIsPrimitive}}
          return(result)
      {{/returnType}}
  }
  {{/operation}}
{{/operations}}

#' @noRd
#' @param response Object of class Response
#' @param returnType either 'list' or 'data.frame'
#' Internal function to convert all (nested) objects
#' in a response object to lists or data frames
.un_object <- function(response, returnType = "data.frame") {
  l <- response$content

  ## Handle return objects of class QueryResult
  if (class(l)[1] == "QueryResult") {
      tmp <- list()
      for (r in l$resultSet) {
          tmp <- append(tmp, r$item)
      }
      l <- tmp  
  }

  if (returnType == "data.frame") {
      if(! is.list(l)) {
          result <- as.data.frame(l$toList())
      } else {      
          strs <-  vapply(l, function(x)x$toJSONString(), FUN.VALUE=character(1))
          result <- jsonlite::fromJSON(
                              paste("[", paste(strs, collapse=","), "]"))
      }

  } else {
      ## Return type is list, coerce everything to list
      if (!is.list(l)) {
          result <- l$toList()
      } else {
          result <- list()
          for (i in seq_along(l)) {
              if (is.object(l[[i]])) {
                  result[[i]] <- l[[i]]$toList()
               } else {
                  result[[i]] <- l[[i]]
              }
          }    
      }
  }    
  return(result)
}
  